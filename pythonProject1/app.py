import streamlit as st
import google.generativeai as genai
import pandas as pd
from vnstock3 import Vnstock
import os

# L·∫•y API Key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
genai.configure(api_key=os.getenv('OPENAI_API_KEY'))

# C·∫•u h√¨nh Streamlit
st.set_page_config(page_title="Ph√¢n T√≠ch B√°o C√°o K·∫øt Qu·∫£ Kinh Doanh", layout="wide")

# Hi·ªÉn th·ªã ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("Ph√¢n T√≠ch B√°o C√°o K·∫øt Qu·∫£ Kinh Doanh Ng√¢n H√†ng")

# Ki·ªÉm tra xem API Key ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ch∆∞a
if not os.getenv('OPENAI_API_KEY'):
    st.error("API Key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng thi·∫øt l·∫≠p API Key trong bi·∫øn m√¥i tr∆∞·ªùng.")

# H√†m l·∫•y B√°o C√°o K·∫øt Qu·∫£ Kinh Doanh
def get_financial_report(symbol='ACB'):
    try:
        # L·∫•y b√°o c√°o t√†i ch√≠nh t·ª´ VNStock
        stock = Vnstock().stock(symbol=symbol, source='VCI')
        income_df = stock.finance.income_statement(period='quarter', lang='vi')

        # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ
        if income_df.empty:
            raise ValueError("D·ªØ li·ªáu b√°o c√°o t√†i ch√≠nh tr·ªëng.")
        return income_df
    except Exception as e:
        return str(e)

# Bi·∫øn ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu ƒë√£ t·∫£i hay ch∆∞a
if 'data_loaded' not in st.session_state:
    st.session_state.data_loaded = False
    st.session_state.income_df = None

# Hi·ªÉn th·ªã spinner ch·ªâ khi d·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c t·∫£i
if not st.session_state.data_loaded:
    with st.spinner('ƒêang t·∫£i d·ªØ li·ªáu...'):
        # Ki·ªÉm tra v√† t·∫£i d·ªØ li·ªáu
        error_message = get_financial_report()

        if isinstance(error_message, pd.DataFrame):  # N·∫øu d·ªØ li·ªáu tr·∫£ v·ªÅ h·ª£p l·ªá
            st.session_state.income_df = error_message
            st.session_state.data_loaded = True
        else:  # N·∫øu c√≥ l·ªói
            st.error(f"ƒê√£ c√≥ l·ªói khi l·∫•y d·ªØ li·ªáu b√°o c√°o t√†i ch√≠nh: {error_message}")

# N·∫øu d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng
if st.session_state.data_loaded:
    st.subheader("B√°o C√°o K·∫øt Qu·∫£ Kinh Doanh")
    st.dataframe(st.session_state.income_df)

    # L·∫•y d·ªØ li·ªáu t·ª´ DataFrame ƒë·ªÉ ph√¢n t√≠ch
    report_data = st.session_state.income_df.to_string()

    # T·∫°o prompt ph√¢n t√≠ch
    prompt = f"""
    D∆∞·ªõi ƒë√¢y l√† B√°o c√°o K·∫øt qu·∫£ Kinh doanh c·ªßa Ng√¢n h√†ng ACB. 
    Ph√¢n t√≠ch t√¨nh h√¨nh doanh thu, l·ª£i nhu·∫≠n g·ªôp, chi ph√≠ v√† l·ª£i nhu·∫≠n r√≤ng trong c√°c qu√Ω g·∫ßn ƒë√¢y. 
    D·ªØ li·ªáu chi ti·∫øt: 
    {report_data}
    """

    # T·∫°o n√∫t "G·ª≠i y√™u c·∫ßu ph√¢n t√≠ch"
    if st.button('G·ª≠i y√™u c·∫ßu ph√¢n t√≠ch'):
        # Hi·ªÉn th·ªã spinner "AI ƒëang ph√¢n t√≠ch"
        with st.spinner('AI ƒëang ph√¢n t√≠ch...'):
            try:
                # G·ª≠i y√™u c·∫ßu ph√¢n t√≠ch t·ªõi Gemini AI
                model = genai.GenerativeModel("gemini-1.5-flash")
                response = model.generate_content(prompt)

                # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ª´ Gemini AI
                st.subheader("Ph√¢n T√≠ch B√°o C√°o K·∫øt Qu·∫£ Kinh Doanh")
                st.write(response.text.strip())

                # Reset session state for analysis after response is received
                st.session_state.data_loaded = False
                st.session_state.income_df = None
            except Exception as e:
                st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra khi y√™u c·∫ßu Gemini AI: {str(e)}")

# N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, hi·ªÉn th·ªã n√∫t t·∫£i l·∫°i
if not st.session_state.data_loaded:
    if st.button('üîÑ T·∫£i l·∫°i d·ªØ li·ªáu'):
        st.session_state.income_df = get_financial_report()
        st.session_state.data_loaded = st.session_state.income_df is not None
        if st.session_state.data_loaded:
            st.success("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i l·∫°i th√†nh c√¥ng!")
        else:
            st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu, vui l√≤ng th·ª≠ l·∫°i.")
